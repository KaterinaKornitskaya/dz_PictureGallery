{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from '@angular/core';\nimport { NgFor } from '@angular/common';\nimport { GalleryService } from './galleryService';\nlet AppComponent = class AppComponent {\n  galleryService;\n  image = \"0\";\n  name = \"0\";\n  author = \"0\";\n  year = 0;\n  description = \"0\";\n  gallery = \"0\";\n  pictures = [];\n  constructor(galleryService) {\n    this.galleryService = galleryService;\n  }\n  ngOnInit() {\n    this.pictures = this.galleryService.getData();\n  }\n  myClick() {\n    alert(\"Hello\");\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'my-app',\n  // Определяется селектор-css для HTML-элемента, который будет представлять компонент.\n  standalone: true,\n  // указывает, что компонент будет независимым, то есть для него не нужно создавать дополнительных модулей\n  imports: [NgFor],\n  providers: [GalleryService],\n  templateUrl: './app.component.html',\n  styleUrl: './style.component.css'\n})\n// Экспортируется класс компонента AppComponent, в котором определяется модель name.\n], AppComponent);\nexport { AppComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}